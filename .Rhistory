doc = content(GET(paste0('http://api.crossref.org/works?filter=doi:',doi)))
doc$message$items[[1]]$link[[1]]$URL
paste0('http://api.crossref.org/works?filter=doi:',doi)
doi = '10.1021/acs.jmedchem.5b01412'
out = ft_get(doi)
out
read_xml(out$plos$data$data[[1]])
doc = content(GET(paste0('http://api.crossref.org/works?filter=doi:',doi)))
doc$message$items[[1]]$link[[1]]$URL
doi = '10.1021/acs.biochem.5b00831'
out = ft_get(doi)
out
read_xml(out$plos$data$data[[1]])
doc = content(GET(paste0('http://api.crossref.org/works?filter=doi:',doi)))
doc$message$items[[1]]$link[[1]]$URL
xlink = doc$message$items[[1]]$link[[1]]$URL
xlink
doi = "http://pubs.acs.org/doi/pdf/10.1021/acs.biochem.5b00831"
doc = content(GET(paste0('http://api.crossref.org/works?filter=doi:',doi), add_headers(Accept = 'application/vnd.crossref.unixsd+xml')))
status = doc$message$`total-results`
doc = content(GET(paste0('http://api.crossref.org/works?filter=doi:',doi)))
status = doc$message$`total-results`
status != 0 && !is.null(status)
xlink = doc$message$items[[1]]$link[[1]]$URL
xlink
a = htmlParse(xlink)
a
a
length(a)
doi = '10.1021/acs.biochem.5b00831'
out = ft_get(doi)
out
read_xml(out$plos$data$data[[1]])
doc = content(GET(paste0('http://api.crossref.org/works?filter=doi:',doi)))
xlink = doc$message$items[[1]]$link[[1]]$URL
xlink
doi = "http://api.elsevier.com/content/article/PII:S0092867415010879?httpAccept=text/xml"
doc = content(GET(paste0('http://api.crossref.org/works?filter=doi:',doi)))
status = doc$message$`total-results`
xlink = doc$message$items[[1]]$link[[1]]$URL
xlink
status = doc$message$`total-results`
doc
doi = "10.1021/acs.biochem.5b00831"
doc = content(GET(paste0('http://api.crossref.org/works?filter=doi:',doi)))
status = doc$message$`total-results`
xlink = doc$message$items[[1]]$link[[1]]$URL
xlink
a = htmlParse(xlink)
a
download.file(xlink, 'introductionToR.pdf', mode="wb").
download.file(xlink, "introductionToR.pdf", mode="wb").
xlink
download.file(xlink, "introductionToR.pdf", mode="wb").
url <- ('http://cran.r-project.org/doc/manuals/R-intro.pdf')
download.file(url, "introductionToR.pdf", mode="wb").
download.file(xlink, "introductionToR.pdf", mode="wb")
doi = "10.1021/acs.biochem.5b00831"
doc = content(GET(paste0('http://api.crossref.org/works?filter=doi:',doi)))
library(stringr)
library(httr)
library(XML)
doi = "10.1021/acs.biochem.5b00831"
doc = content(GET(paste0('http://api.crossref.org/works?filter=doi:',doi)))
xlink = doc$message$items[[1]]$link[[1]]$URL
xlink
download.file(xlink, "introductionToR.pdf")
devtools::install_github("hadley/ggplot2")
library(DT)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
datatable(df, options = list(
columnDefs = list(list(targets = 6, visible = FALSE))
)) %>% formatStyle(
'V1', 'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
rm(list=ls())
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/BAEP_server_Devel/BET/")
sc70 = read.table("sequenceClusterLastRes_70.txt", header=T, sep="\t", stringsAsFactors = F)
dim(sc70)
head(sc70)
sc70_o = sc70[sc70$Res == 1,]
head(sc70_o)
dim(sc70_o)
tail(sc70_o)
sc = read.table("sequenceClusterResult.txt", header=T, sep="\t", stringsAsFactors = F)
dim(sc)
dim(sc70)
sc2 = sc[sc$Res == 1,]
head(sc2)
dim(sc2)
dim(sc70_o)
names(sc70_o)
sc70_o = sc70[sc70$Res == 1,][-2]
head(sc70_o)
names(sc70_o)[2:3] = c("Stoichiometry70", "SymmetrySC70")
head(sc70_o)
current = read.table("currentResult.txt", header=T, sep="\t", stringsAsFactors = F)
dim(current)
head(current)
merged70 = merge(current, sc70_o, by="PDB.ID")
head(merged70)
dim(merged70)
tail(merged70)
min(merged70$CS)
min(merged70$Consistency.score)
table(merged70$Consistency.score == merged70$CS)
dim(merged70)
merged70 = merge(current, sc70_o, by="PDB.ID")[-9]
head(merged70)
merged70 = merge(current, sc70_o, by="PDB.ID")
head(merged70)
merged70 = merge(current, sc70_o, by="PDB.ID")[-9]
head(merged70)
dim(merged70)
dim(i in 1:dim(merged70)[1]){
merged70$Result[i] = if(merged70$Stoichiometry[i] == merged70$Stoichiometry70[i] && merged70$Symmetry[i] == merged70$SymmetrySC70[i]){"Consistent"}else{"Outlier"}
print(i)
}
for(i in 1:dim(merged70)[1]){
merged70$Result[i] = if(merged70$Stoichiometry[i] == merged70$Stoichiometry70[i] && merged70$Symmetry[i] == merged70$SymmetrySC70[i]){"Consistent"}else{"Outlier"}
print(i)
}
merged70_last = merged70[merged70$Result == "Outlier",]
dim(merged70_last)
head(merged70_last)
a = read.table("Outlier70.txt", T)
dim(a)
head(a)
merged70_last = merged70[merged70$Result == "Outlier",]
write.table(merged70_last, "outlierResult70.txt", quote = F, sep="\t", row.names = F)
rm(list=ls())
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/BAEP_server_Devel/BET/")
sc95 = read.table("sequenceClusterLastRes_95.txt", header=T, sep="\t", stringsAsFactors = F)
dim(sc95)
head(sc95)
sc95_o = sc95[sc95$Res == 1,][-2]
head(sc95_o)
dim(sc95_o)
names(sc95_o)[2:3] = c("Stoichiometry95", "SymmetrySC95")
current = read.table("currentResult.txt", header=T, sep="\t", stringsAsFactors = F)
dim(current)
head(current)
merged95 = merge(current, sc95_o, by="PDB.ID")[-9]
head(merged95)
dim(merged95)
for(i in 1:dim(merged95)[1]){
merged95$Result[i] = if(merged95$Stoichiometry[i] == merged95$Stoichiometry95[i] && merged95$Symmetry[i] == merged95$SymmetrySC95[i]){"Consistent"}else{"Outlier"}
print(i)
}
merged95_last = merged95[merged95$Result == "Outlier",]
head(merged95_last)
dim(merged95_last)
write.table(merged95_last, "outlierResult95.txt", quote = F, sep="\t", row.names = F)
rm(list=ls())
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/BAEP_server_Devel/BET/")
sc90 = read.table("sequenceClusterLastRes_90.txt", header=T, sep="\t", stringsAsFactors = F)
dim(sc90)
head(sc90)
sc90_o = sc90[sc90$Res == 1,][-2]
head(sc90_o)
dim(sc90_o)
names(sc90_o)[2:3] = c("Stoichiometry90", "SymmetrySC90")
current = read.table("currentResult.txt", header=T, sep="\t", stringsAsFactors = F)
dim(current)
head(current)
merged90 = merge(current, sc90_o, by="PDB.ID")[-9]
head(merged90)
dim(merged90)
for(i in 1:dim(merged90)[1]){
merged90$Result[i] = if(merged90$Stoichiometry[i] == merged90$Stoichiometry90[i] && merged90$Symmetry[i] == merged90$SymmetrySC90[i]){"Consistent"}else{"Outlier"}
print(i)
}
merged90_last = merged90[merged90$Result == "Outlier",]
head(merged90_last)
dim(merged90_last)
write.table(merged90_last, "outlierResult90.txt", quote = F, sep="\t", row.names = F)
rm(list=ls())
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/BAEP_server_Devel/BET/")
sc40 = read.table("sequenceClusterLastRes_40.txt", header=T, sep="\t", stringsAsFactors = F)
dim(sc40)
head(sc40)
sc40_o = sc40[sc40$Res == 1,][-2]
head(sc40_o)
dim(sc40_o)
names(sc40_o)[2:3] = c("Stoichiometry40", "SymmetrySC40")
current = read.table("currentResult.txt", header=T, sep="\t", stringsAsFactors = F)
dim(current)
head(current)
merged40 = merge(current, sc40_o, by="PDB.ID")[-9]
head(merged40)
dim(merged40)
for(i in 1:dim(merged40)[1]){
merged40$Result[i] = if(merged40$Stoichiometry[i] == merged40$Stoichiometry40[i] && merged40$Symmetry[i] == merged40$SymmetrySC40[i]){"Consistent"}else{"Outlier"}
print(i)
}
merged40_last = merged40[merged40$Result == "Outlier",]
head(merged40_last)
dim(merged40_last)
write.table(merged40_last, "outlierResult40.txt", quote = F, sep="\t", row.names = F)
rm(list=ls())
setwd("/home/ubuntu/BAEP_server_Devel/")
### packages (start) #####
load("consistencyList.rda")
### packages (end) #####
data = read.table("Pisa_results.txt", header=T, sep = "\t", stringsAsFactors = F)
dim(data)
tail(data)
data[data$pdbId =="1OCT",]
data = data[data$pdbId =="1OCT",]
data
for(p in 1:dim(data)[1]){
index95 = which(consistencyList$consistencyData95$"PDB ID" %in% as.character(data$pdbId[p]))
if(length(index95) > 0){
result = consistencyList$consistencyData95[index95, c("PDB ID", "BA Number", "Stoichiometry", "Symmetry","Representative", "Consistency score", "Result")]
#currentResult = result[1:4]
pdbList = result
sequenceCluster = consistencyList$consistencyData95[consistencyList$consistencyData95[,3] %in% pdbList$Representative,]
cols = c("Stoichiometry", "Symmetry")
sequenceCluster$combinedOligomericState <- apply(sequenceCluster[,cols ] , 1 , paste , collapse = "_" )
sequenceCluster2 = unique(sequenceCluster[,c("PDB ID","Representative","Stoichiometry", "Symmetry", "Consistency score", "combinedOligomericState")])
splitData = split(sequenceCluster2,factor(sequenceCluster2$Representative))
signatureDataList = list ()
for(i in 1:length(splitData)){
signatureData = splitData[[i]]
for(j in 1:dim(signatureData)[1]){
signatureData$count[j] = sum(signatureData$combinedOligomericState == signatureData$combinedOligomericState[j])
}
tbl = table(factor(signatureData$`PDB ID`), factor(signatureData$combinedOligomericState))
sequenceCluster3 = unique(signatureData)
sequenceCluster3$pdbIds = NA
if(length(unique(signatureData$`PDB ID`)) ==1){
sequenceCluster3$pdbIds = signatureData$`PDB ID`
}else{
for(j in 1:dim(tbl)[2]){
sequenceCluster3[sequenceCluster3$combinedOligomericState == colnames(tbl)[j],][,"pdbIds"] = paste(names(which(tbl[,j] == 1)), collapse=", ")
}
}
sequenceCluster3
names(sequenceCluster3)[c(2,7:8)] = c("Representative", "# of PDBs", "PDB IDs")
sequenceCluster4 = sequenceCluster3[-6]
signatureDataList[[i]] = sequenceCluster4
}
lastResult = do.call(rbind.data.frame, signatureDataList)
lastResult2 = unique(lastResult[,-1])
sequenceCluster = lastResult2
sequenceCluster$PDBID = data$pdbId[p]
sequenceClusterLast = sequenceCluster[,c(7,1:6)]
names(sequenceClusterLast) = c("PDB ID", "Representative chain","Stoichiometry", "Symmetry",
"Consistency score", "Number of PDB entries", "PDB entries in the cluster")
maxCS = sequenceClusterLast$`Consistency score`[which.max(sequenceClusterLast$`Consistency score`)]
sequenceClusterLast$CS = maxCS
if(maxCS > 0.5 && sum(sequenceClusterLast[,6]) > 3){
for(i in 1: dim(sequenceClusterLast)[1]){
sequenceClusterLast$Res[i] = if(sequenceClusterLast$CS[i] == sequenceClusterLast$`Consistency score`[i]){1}else{0}
}
} else{
sequenceClusterLast$Res = 0
}
listSplit = rbind(listSplit, sequenceClusterLast[-7])
#listSplit[[p]] = sequenceClusterLast[-7]
}
print(paste0(p,"/",dim(data)[1]))
}
listSplit = as.data.frame(matrix(NA,1,8),stringsAsFactors = F)
for(p in 1:dim(data)[1]){
index95 = which(consistencyList$consistencyData95$"PDB ID" %in% as.character(data$pdbId[p]))
if(length(index95) > 0){
result = consistencyList$consistencyData95[index95, c("PDB ID", "BA Number", "Stoichiometry", "Symmetry","Representative", "Consistency score", "Result")]
#currentResult = result[1:4]
pdbList = result
sequenceCluster = consistencyList$consistencyData95[consistencyList$consistencyData95[,3] %in% pdbList$Representative,]
cols = c("Stoichiometry", "Symmetry")
sequenceCluster$combinedOligomericState <- apply(sequenceCluster[,cols ] , 1 , paste , collapse = "_" )
sequenceCluster2 = unique(sequenceCluster[,c("PDB ID","Representative","Stoichiometry", "Symmetry", "Consistency score", "combinedOligomericState")])
splitData = split(sequenceCluster2,factor(sequenceCluster2$Representative))
signatureDataList = list ()
for(i in 1:length(splitData)){
signatureData = splitData[[i]]
for(j in 1:dim(signatureData)[1]){
signatureData$count[j] = sum(signatureData$combinedOligomericState == signatureData$combinedOligomericState[j])
}
tbl = table(factor(signatureData$`PDB ID`), factor(signatureData$combinedOligomericState))
sequenceCluster3 = unique(signatureData)
sequenceCluster3$pdbIds = NA
if(length(unique(signatureData$`PDB ID`)) ==1){
sequenceCluster3$pdbIds = signatureData$`PDB ID`
}else{
for(j in 1:dim(tbl)[2]){
sequenceCluster3[sequenceCluster3$combinedOligomericState == colnames(tbl)[j],][,"pdbIds"] = paste(names(which(tbl[,j] == 1)), collapse=", ")
}
}
sequenceCluster3
names(sequenceCluster3)[c(2,7:8)] = c("Representative", "# of PDBs", "PDB IDs")
sequenceCluster4 = sequenceCluster3[-6]
signatureDataList[[i]] = sequenceCluster4
}
lastResult = do.call(rbind.data.frame, signatureDataList)
lastResult2 = unique(lastResult[,-1])
sequenceCluster = lastResult2
sequenceCluster$PDBID = data$pdbId[p]
sequenceClusterLast = sequenceCluster[,c(7,1:6)]
names(sequenceClusterLast) = c("PDB ID", "Representative chain","Stoichiometry", "Symmetry",
"Consistency score", "Number of PDB entries", "PDB entries in the cluster")
maxCS = sequenceClusterLast$`Consistency score`[which.max(sequenceClusterLast$`Consistency score`)]
sequenceClusterLast$CS = maxCS
if(maxCS > 0.5 && sum(sequenceClusterLast[,6]) > 3){
for(i in 1: dim(sequenceClusterLast)[1]){
sequenceClusterLast$Res[i] = if(sequenceClusterLast$CS[i] == sequenceClusterLast$`Consistency score`[i]){1}else{0}
}
} else{
sequenceClusterLast$Res = 0
}
listSplit = rbind(listSplit, sequenceClusterLast[-7])
#listSplit[[p]] = sequenceClusterLast[-7]
}
print(paste0(p,"/",dim(data)[1]))
}
listSplit
listSplit = as.data.frame(matrix(NA,1,8),stringsAsFactors = F)
names(listSplit) = c("PDB ID",  "Representative chain", "Stoichiometry",  "Symmetry", "Consistency score",  "Number of PDB entries",  "CS", "Res")
for(p in 1:dim(data)[1]){
index95 = which(consistencyList$consistencyData95$"PDB ID" %in% as.character(data$pdbId[p]))
if(length(index95) > 0){
result = consistencyList$consistencyData95[index95, c("PDB ID", "BA Number", "Stoichiometry", "Symmetry","Representative", "Consistency score", "Result")]
#currentResult = result[1:4]
pdbList = result
sequenceCluster = consistencyList$consistencyData95[consistencyList$consistencyData95[,3] %in% pdbList$Representative,]
cols = c("Stoichiometry", "Symmetry")
sequenceCluster$combinedOligomericState <- apply(sequenceCluster[,cols ] , 1 , paste , collapse = "_" )
sequenceCluster2 = unique(sequenceCluster[,c("PDB ID","Representative","Stoichiometry", "Symmetry", "Consistency score", "combinedOligomericState")])
splitData = split(sequenceCluster2,factor(sequenceCluster2$Representative))
signatureDataList = list ()
for(i in 1:length(splitData)){
signatureData = splitData[[i]]
for(j in 1:dim(signatureData)[1]){
signatureData$count[j] = sum(signatureData$combinedOligomericState == signatureData$combinedOligomericState[j])
}
tbl = table(factor(signatureData$`PDB ID`), factor(signatureData$combinedOligomericState))
sequenceCluster3 = unique(signatureData)
sequenceCluster3$pdbIds = NA
if(length(unique(signatureData$`PDB ID`)) ==1){
sequenceCluster3$pdbIds = signatureData$`PDB ID`
}else{
for(j in 1:dim(tbl)[2]){
sequenceCluster3[sequenceCluster3$combinedOligomericState == colnames(tbl)[j],][,"pdbIds"] = paste(names(which(tbl[,j] == 1)), collapse=", ")
}
}
sequenceCluster3
names(sequenceCluster3)[c(2,7:8)] = c("Representative", "# of PDBs", "PDB IDs")
sequenceCluster4 = sequenceCluster3[-6]
signatureDataList[[i]] = sequenceCluster4
}
lastResult = do.call(rbind.data.frame, signatureDataList)
lastResult2 = unique(lastResult[,-1])
sequenceCluster = lastResult2
sequenceCluster$PDBID = data$pdbId[p]
sequenceClusterLast = sequenceCluster[,c(7,1:6)]
names(sequenceClusterLast) = c("PDB ID", "Representative chain","Stoichiometry", "Symmetry",
"Consistency score", "Number of PDB entries", "PDB entries in the cluster")
maxCS = sequenceClusterLast$`Consistency score`[which.max(sequenceClusterLast$`Consistency score`)]
sequenceClusterLast$CS = maxCS
if(maxCS > 0.5 && sum(sequenceClusterLast[,6]) > 3){
for(i in 1: dim(sequenceClusterLast)[1]){
sequenceClusterLast$Res[i] = if(sequenceClusterLast$CS[i] == sequenceClusterLast$`Consistency score`[i]){1}else{0}
}
} else{
sequenceClusterLast$Res = 0
}
listSplit = rbind(listSplit, sequenceClusterLast[-7])
#listSplit[[p]] = sequenceClusterLast[-7]
}
print(paste0(p,"/",dim(data)[1]))
}
listSplit = listSplit[complete.cases(listSplit),]
listSplit
seqCluster2 = listSplit
seqCluster3 = seqCluster2[,c(1,3,5,6)]
seqCluster3
max(seqCluster3[,3])
sum(seqCluster3[,4])
max(seqCluster3[,3]) <= 0.5 || sum(seqCluster3[,4]) < 3
seqCluster3 = seqCluster3[,1:2]
seqCluster3
seqCluster3 = seqCluster3[,1:3]
seqCluster3 = seqCluster2[,c(1,3,5,6)]
if(max(seqCluster3[,3]) <= 0.5 || sum(seqCluster3[,4]) < 3){
seqCluster3[,2] = "Inconclusive"
}
seqCluster3
seqCluster3
seqCluster3[,1:3]
seqCluster4 = seqCluster3[which.max(seqCluster3[,3]),]
seqCluster4
seqCluster4[-4]
seqCluster4[1:2]
seqCluster4[,1:2]
max(seqCluster3[,3]) <= 0.5 || sum(seqCluster3[,4]) < 3
listSplit
for(p in 1:dim(data)[1]){
index95 = which(consistencyList$consistencyData95$"PDB ID" %in% as.character(data$pdbId[p]))
if(length(index95) > 0){
result = consistencyList$consistencyData95[index95, c("PDB ID", "BA Number", "Stoichiometry", "Symmetry","Representative", "Consistency score", "Result")]
#currentResult = result[1:4]
pdbList = result
sequenceCluster = consistencyList$consistencyData95[consistencyList$consistencyData95[,3] %in% pdbList$Representative,]
cols = c("Stoichiometry", "Symmetry")
sequenceCluster$combinedOligomericState <- apply(sequenceCluster[,cols ] , 1 , paste , collapse = "_" )
sequenceCluster2 = unique(sequenceCluster[,c("PDB ID","Representative","Stoichiometry", "Symmetry", "Consistency score", "combinedOligomericState")])
splitData = split(sequenceCluster2,factor(sequenceCluster2$Representative))
signatureDataList = list ()
for(i in 1:length(splitData)){
signatureData = splitData[[i]]
for(j in 1:dim(signatureData)[1]){
signatureData$count[j] = sum(signatureData$combinedOligomericState == signatureData$combinedOligomericState[j])
}
tbl = table(factor(signatureData$`PDB ID`), factor(signatureData$combinedOligomericState))
sequenceCluster3 = unique(signatureData)
sequenceCluster3$pdbIds = NA
if(length(unique(signatureData$`PDB ID`)) ==1){
sequenceCluster3$pdbIds = signatureData$`PDB ID`
}else{
for(j in 1:dim(tbl)[2]){
sequenceCluster3[sequenceCluster3$combinedOligomericState == colnames(tbl)[j],][,"pdbIds"] = paste(names(which(tbl[,j] == 1)), collapse=", ")
}
}
sequenceCluster3
names(sequenceCluster3)[c(2,7:8)] = c("Representative", "# of PDBs", "PDB IDs")
sequenceCluster4 = sequenceCluster3[-6]
signatureDataList[[i]] = sequenceCluster4
}
lastResult = do.call(rbind.data.frame, signatureDataList)
lastResult2 = unique(lastResult[,-1])
sequenceCluster = lastResult2
sequenceCluster$PDBID = data$pdbId[p]
sequenceClusterLast = sequenceCluster[,c(7,1:6)]
names(sequenceClusterLast) = c("PDB ID", "Representative chain","Stoichiometry", "Symmetry",
"Consistency score", "Number of PDB entries", "PDB entries in the cluster")
maxCS = sequenceClusterLast$`Consistency score`[which.max(sequenceClusterLast$`Consistency score`)]
sequenceClusterLast$CS = maxCS
if(maxCS > 0.5 && sum(sequenceClusterLast[,6]) > 2){
for(i in 1: dim(sequenceClusterLast)[1]){
sequenceClusterLast$Res[i] = if(sequenceClusterLast$CS[i] == sequenceClusterLast$`Consistency score`[i]){1}else{0}
}
} else{
sequenceClusterLast$Res = 0
}
listSplit = rbind(listSplit, sequenceClusterLast[-7])
#listSplit[[p]] = sequenceClusterLast[-7]
}
print(paste0(p,"/",dim(data)[1]))
}
listSplit = listSplit[complete.cases(listSplit),]
listSplit
listSplit = as.data.frame(matrix(NA,1,8),stringsAsFactors = F)
names(listSplit) = c("PDB ID",  "Representative chain", "Stoichiometry",  "Symmetry", "Consistency score",  "Number of PDB entries",  "CS", "Res")
for(p in 1:dim(data)[1]){
index95 = which(consistencyList$consistencyData95$"PDB ID" %in% as.character(data$pdbId[p]))
if(length(index95) > 0){
result = consistencyList$consistencyData95[index95, c("PDB ID", "BA Number", "Stoichiometry", "Symmetry","Representative", "Consistency score", "Result")]
#currentResult = result[1:4]
pdbList = result
sequenceCluster = consistencyList$consistencyData95[consistencyList$consistencyData95[,3] %in% pdbList$Representative,]
cols = c("Stoichiometry", "Symmetry")
sequenceCluster$combinedOligomericState <- apply(sequenceCluster[,cols ] , 1 , paste , collapse = "_" )
sequenceCluster2 = unique(sequenceCluster[,c("PDB ID","Representative","Stoichiometry", "Symmetry", "Consistency score", "combinedOligomericState")])
splitData = split(sequenceCluster2,factor(sequenceCluster2$Representative))
signatureDataList = list ()
for(i in 1:length(splitData)){
signatureData = splitData[[i]]
for(j in 1:dim(signatureData)[1]){
signatureData$count[j] = sum(signatureData$combinedOligomericState == signatureData$combinedOligomericState[j])
}
tbl = table(factor(signatureData$`PDB ID`), factor(signatureData$combinedOligomericState))
sequenceCluster3 = unique(signatureData)
sequenceCluster3$pdbIds = NA
if(length(unique(signatureData$`PDB ID`)) ==1){
sequenceCluster3$pdbIds = signatureData$`PDB ID`
}else{
for(j in 1:dim(tbl)[2]){
sequenceCluster3[sequenceCluster3$combinedOligomericState == colnames(tbl)[j],][,"pdbIds"] = paste(names(which(tbl[,j] == 1)), collapse=", ")
}
}
sequenceCluster3
names(sequenceCluster3)[c(2,7:8)] = c("Representative", "# of PDBs", "PDB IDs")
sequenceCluster4 = sequenceCluster3[-6]
signatureDataList[[i]] = sequenceCluster4
}
lastResult = do.call(rbind.data.frame, signatureDataList)
lastResult2 = unique(lastResult[,-1])
sequenceCluster = lastResult2
sequenceCluster$PDBID = data$pdbId[p]
sequenceClusterLast = sequenceCluster[,c(7,1:6)]
names(sequenceClusterLast) = c("PDB ID", "Representative chain","Stoichiometry", "Symmetry",
"Consistency score", "Number of PDB entries", "PDB entries in the cluster")
maxCS = sequenceClusterLast$`Consistency score`[which.max(sequenceClusterLast$`Consistency score`)]
sequenceClusterLast$CS = maxCS
if(maxCS > 0.5 && sum(sequenceClusterLast[,6]) > 2){
for(i in 1: dim(sequenceClusterLast)[1]){
sequenceClusterLast$Res[i] = if(sequenceClusterLast$CS[i] == sequenceClusterLast$`Consistency score`[i]){1}else{0}
}
} else{
sequenceClusterLast$Res = 0
}
listSplit = rbind(listSplit, sequenceClusterLast[-7])
#listSplit[[p]] = sequenceClusterLast[-7]
}
print(paste0(p,"/",dim(data)[1]))
}
listSplit = listSplit[complete.cases(listSplit),]
listSplit
