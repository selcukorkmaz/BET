if (resid) {yr <-range(yhat, y)}else{yr <-range(yhat)}
if (se) {
temp <- 2* sqrt(x$var[i,i]*seval)
yup <- yhat + temp
ylow<- yhat - temp
yr <- range(yr, yup, ylow)
newData2 = cbind.data.frame(pred.x,yhat, yup, ylow)
}
newData = cbind.data.frame(xx, y)
newData3 = cbind.data.frame(pred.x, yhat)
fn =  paste0("function() {\n if (this.value == ", xaxisval[1], ") {return ",xaxislab[1], "}\n
if (this.value == ", xaxisval[2], ") {return ",xaxislab[2], "}\n
if (this.value == ", xaxisval[3], ") {return ",xaxislab[3], "}\n
if (this.value == ", xaxisval[4], ") {return ",xaxislab[4], "}\n
if (this.value == ", xaxisval[5], ") {return ",xaxislab[5], "}\n
if (this.value == ", xaxisval[6], ") {return ",xaxislab[6], "}\n
if (this.value == ", xaxisval[7], ") {return ",xaxislab[7], "}\n
if (this.value == ", xaxisval[8], ") {return ",xaxislab[8], "}\n
", "}"
)
ylabel =  paste0("Scaled Schoenfeld residuals for ", svar)
sp = highchart() %>%
hc_add_series(name = "Curve", data = as.matrix(newData3), type = "line",  enabled = FALSE, color = "#204BD9", marker = list(enabled = FALSE), id = "schoenLine")%>%
hc_xAxis(tickInterval=NULL, tickLength = 5, lineWidth = 1, tickPositions = xaxisval, labels = list(formatter = JS(fn), format = "{value:.2f}"), title = list(text = "Time"))%>%
hc_yAxis(tickInterval=NULL, tickLength = 5, lineWidth = 1, title = list(text = ylabel), labels = list(format = "{value:.2f}"))%>%
hc_title(text = "Schoenfeld Plot") %>%
hc_add_theme(hc_theme_google()) %>%
hc_plotOptions(line = list(dashStyle = "Solid")) %>%
hc_chart(backgroundColor = "#FFFFFF", zoomType = "xy") %>%
hc_tooltip(shared = TRUE, crosshairs = FALSE, valueDecimals = 2, followTouchMove = FALSE)
if (resid){
sp = sp %>%  hc_add_series(name = "Residuals", data = as.matrix(newData), type="scatter",  labels = list(format = "{value:.2f}"), color = "#000000", zIndex = 10, marker = list(symbol = "circle", radius = 4))
}
if (se){
sp = sp %>% hc_add_series(name = "CI", data = as.matrix(cbind(newData2$pred.x, newData2$ylow, newData2$yup)),
type = "arearange", fillOpacity = 0.4, showInLegend = FALSE, linkedTo = "schoenLine", color ="#59A819")
}
sp = sp %>% hc_exporting(enabled = TRUE, filename = "schoenfeldplot")
}
sp
data <- read.table("www/data/brainCancer.txt", header=TRUE, sep = "\t")
survivalTime = "time"
statusVariable  = "status"
status = 1
rnames = colnames(data)
fctr = "group"
fctr = rnames[which.max(RecordLinkage::levenshteinSim(fctr,rnames))]
#ci = input$ciKM
#varianceEstimation = input$varianceEstimationKM
#confidenceLevel = input$confidenceLevelKM
factors = fctr
if(!is.null(survivalTime)){
survivalTime = as.matrix(data[, survivalTime, drop = FALSE])
}
if(!is.null(factors)){
factors = as.factor(data[, factors])
}
if(!is.null(statusVariable)){
statusVariable = data[, statusVariable]
}
if(!is.null(status)){
if(is.numeric(status)){status = as.factor(status)}else{status = as.factor(status)}
}
if(!is.null(factors)){
newData = data.frame(id =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime,
statusVar=statusVariable,factor = factors)
newData = newData[complete.cases(newData),]
colnames(newData) = c("id", "time", "statusVar", "factor")
}
newData$statusVar = newData$statusVar%in%status
if(!is.null(fctr)){
compareCurves <- survfit(Surv(time, statusVar == TRUE) ~ factors, data = newData)
for(i in 1:length(names(compareCurves$strata))) {
names(compareCurves$strata)[i] = gsub("factors", fctr, names(compareCurves$strata)[i])
}
}
p = hchart(compareCurves, fun = "cloglog", ranges = FALSE, type = "line", animation = TRUE, rangesOpacity = 0.4)
p %>% hc_exporting(enabled = TRUE, filename = "plot") %>%
hc_title(text = "Log-Minus-Log Plot") %>%
hc_xAxis(title = list(text = "Time"), tickInterval=NULL, tickLength = 5, lineWidth = 1)  %>%
hc_yAxis(title = list(text = "log(-log(survival))"), lineWidth = 1, tickLength = 5, tickWidth= 1, labels = list(format = "{value:.2f}")) %>%
#hc_colors("#440154") %>%
hc_add_theme(hc_theme_google()) %>%
hc_chart(backgroundColor = "white", zoomType = "xy") %>%
hc_legend(enabled = TRUE) %>%
hc_plotOptions(line = list(dashStyle = "Solid"), area = list(zIndex = 15), series = list(enableMouseTracking = TRUE)) %>%
hc_tooltip(shared = TRUE, crosshairs = TRUE, valueDecimals = 3, followTouchMove = FALSE, headerFormat = "<b>Time</b>: {point.key} <br>")
data <- read.table("www/data/brainCancer.txt", header=TRUE, sep = "\t")
survivalTime = "time"
statusVariable  = "status"
status = 1
rnames = colnames(data)
fctr = "group"
fctr = rnames[which.max(RecordLinkage::levenshteinSim(fctr,rnames))]
#ci = input$ciKM
#varianceEstimation = input$varianceEstimationKM
#confidenceLevel = input$confidenceLevelKM
factors = fctr
if(!is.null(survivalTime)){
survivalTime = as.matrix(data[, survivalTime, drop = FALSE])
}
if(!is.null(factors)){
factors = as.factor(data[, factors])
}
if(!is.null(statusVariable)){
statusVariable = data[, statusVariable]
}
if(!is.null(status)){
if(is.numeric(status)){status = as.factor(status)}else{status = as.factor(status)}
}
if(!is.null(factors)){
newData = data.frame(id =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime,
statusVar=statusVariable,factor = factors)
newData = newData[complete.cases(newData),]
colnames(newData) = c("id", "time", "statusVar", "factor")
}
newData$statusVar = newData$statusVar%in%status
if(!is.null(fctr)){
compareCurves <- survfit(Surv(time, statusVar == TRUE) ~ factors, data = newData)
for(i in 1:length(names(compareCurves$strata))) {
names(compareCurves$strata)[i] = gsub("factors", fctr, names(compareCurves$strata)[i])
}
}
p = hchart(compareCurves, fun = "cloglog", ranges = FALSE, type = "line", animation = TRUE, rangesOpacity = 0.4)
p %>% hc_exporting(enabled = TRUE, filename = "plot") %>%
hc_title(text = "Log-Minus-Log Plot") %>%
hc_xAxis(title = list(text = "Time"), tickInterval=NULL, tickLength = 5, lineWidth = 1)  %>%
hc_yAxis(title = list(text = "log(-log(survival))"), lineWidth = 1, tickLength = 5, tickWidth= 1, labels = list(format = "{value:.2f}")) %>%
#hc_colors("#440154") %>%
hc_add_theme(hc_theme_google()) %>%
hc_chart(backgroundColor = "white", zoomType = "xy") %>%
hc_legend(enabled = TRUE) %>%
hc_plotOptions(line = list(dashStyle = "Solid"), area = list(zIndex = 15), series = list(enableMouseTracking = TRUE)) %>%
hc_tooltip(shared = TRUE, crosshairs = TRUE, valueDecimals = 3, followTouchMove = FALSE, headerFormat = "<b>Time</b>: {point.key} <br>")
data <- read.table("www/data/brainCancer.txt", header=TRUE, sep = "\t")
survivalTime = "time"
statusVariable  = "status"
status = 1
rnames = colnames(data)
fctr = "group"
fctr = rnames[which.max(RecordLinkage::levenshteinSim(fctr,rnames))]
#ci = input$ciKM
#varianceEstimation = input$varianceEstimationKM
#confidenceLevel = input$confidenceLevelKM
factors = fctr
if(!is.null(survivalTime)){
survivalTime = as.matrix(data[, survivalTime, drop = FALSE])
}
if(!is.null(factors)){
factors = as.factor(data[, factors])
}
if(!is.null(statusVariable)){
statusVariable = data[, statusVariable]
}
if(!is.null(status)){
if(is.numeric(status)){status = as.factor(status)}else{status = as.factor(status)}
}
if(!is.null(factors)){
newData = data.frame(id =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime,
statusVar=statusVariable,factor = factors)
newData = newData[complete.cases(newData),]
colnames(newData) = c("id", "time", "statusVar", "factor")
}
newData$statusVar = newData$statusVar%in%status
if(!is.null(fctr)){
compareCurves <- survfit(Surv(time, statusVar == TRUE) ~ factors, data = newData)
for(i in 1:length(names(compareCurves$strata))) {
names(compareCurves$strata)[i] = gsub("factors", fctr, names(compareCurves$strata)[i])
}
}
p = hchart(compareCurves, fun = "cloglog", ranges = FALSE, type = "line", animation = TRUE, rangesOpacity = 0.4)
p %>% hc_exporting(enabled = TRUE, filename = "plot") %>%
hc_title(text = "Log-Minus-Log Plot") %>%
hc_xAxis(title = list(text = "Time"), tickInterval=NULL, tickLength = 5, lineWidth = 1)  %>%
hc_yAxis(title = list(text = "log(-log(survival))"), lineWidth = 1, tickLength = 5, tickWidth= 1, labels = list(format = "{value:.2f}")) %>%
#hc_colors("#440154") %>%
hc_add_theme(hc_theme_google()) %>%
hc_chart(backgroundColor = "white", zoomType = "xy") %>%
hc_legend(enabled = TRUE) %>%
hc_plotOptions(line = list(dashStyle = "Solid"), area = list(zIndex = 15), series = list(enableMouseTracking = TRUE)) %>%
hc_tooltip(shared = TRUE, crosshairs = TRUE, valueDecimals = 3, followTouchMove = FALSE, headerFormat = "<b>Time</b>: {point.key} <br>")
?glmnet
?glmnet::glmnet
library("glmnet")
data <- read.table("www/data/brainCancer.txt", header=TRUE, sep = "\t")
survivalTimerCox = "time"
survivalStatusrCox = "status"
regCoxList = list()
indx = !(colnames(data) %in% c(survivalTimerCox, survivalStatusrCox))
x = data.matrix(data[,indx, drop = FALSE])
y= Surv(data[,survivalTimerCox], data[,survivalStatusrCox])
set.seed(1234)
cvFit = cv.glmnet(x, y, family = "cox", alpha = 1)
coefficients = as.data.frame(as.matrix(coef(cvFit, s = cvFit$lambda.min)))
coefficients$`1` = as.numeric(formatC(coefficients$`1`, digits = 3, format = "f"))
coefficients2 = data.frame(rownames(coefficients), coefficients[,1])
coefficients3 = coefficients2[coefficients2[2] != 0,]
colnames(coefficients3) = c("Variable", "Coefficient estimate")
varsNotInTheModel = coefficients2[coefficients2[2] == 0,]
if(nrow(varsNotInTheModel) > 0){
varsNotInTheModel$coefficients...1. = formatC(varsNotInTheModel$coefficients...1., digits = 3, format = "f")
colnames(varsNotInTheModel) = c("Variable", "Coefficient estimate")
}else{
varsNotInTheModel = NULL
}
regCoxList = list(coefficients3, varsNotInTheModel)
datatable(regCoxList[[1]], extensions = c('Buttons','KeyTable', 'Responsive'),                  options = list(dom = 'Bfrtip',buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), keys = TRUE))
library("glmnet")
data <- read.table("www/data/brainCancer.txt", header=TRUE, sep = "\t")
survivalTimerCox = "time"
survivalStatusrCox = "status"
regCoxList = list()
indx = !(colnames(data) %in% c(survivalTimerCox, survivalStatusrCox))
x = data.matrix(data[,indx, drop = FALSE])
y= Surv(data[,survivalTimerCox], data[,survivalStatusrCox])
set.seed(1234)
cvFit = cv.glmnet(x, y, family = "cox", alpha = 1)
coefficients = as.data.frame(as.matrix(coef(cvFit, s = cvFit$lambda.min)))
coefficients$`1` = as.numeric(formatC(coefficients$`1`, digits = 3, format = "f"))
coefficients2 = data.frame(rownames(coefficients), coefficients[,1])
coefficients3 = coefficients2[coefficients2[2] != 0,]
colnames(coefficients3) = c("Variable", "Coefficient estimate")
varsNotInTheModel = coefficients2[coefficients2[2] == 0,]
if(nrow(varsNotInTheModel) > 0){
varsNotInTheModel$coefficients...1. = formatC(varsNotInTheModel$coefficients...1., digits = 3, format = "f")
colnames(varsNotInTheModel) = c("Variable", "Coefficient estimate")
}else{
varsNotInTheModel = NULL
}
regCoxList = list(coefficients3, varsNotInTheModel)
datatable(regCoxList[[1]], extensions = c('Buttons','KeyTable', 'Responsive'), options = list(dom = 'Bfrtip',buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), keys = TRUE))
data <- read.table("www/data/brainCancer.txt", header=TRUE, sep = "\t")
head(data)
dim(data)
library("glmnet")
data <- read.table("www/data/brainCancer.txt", header=TRUE, sep = "\t")
survivalTimerCox = "time"
survivalStatusrCox = "status"
regCoxList = list()
indx = !(colnames(dataM()) %in% c(survivalTimerCox, survivalStatusrCox))
indx = !(colnames(data %in% c(survivalTimerCox, survivalStatusrCox))
indx = !(colnames(data) %in% c(survivalTimerCox, survivalStatusrCox))
x = data.matrix(data[,indx, drop = FALSE])
y= Surv(data[,survivalTimerCox], dataM()[,survivalStatusrCox])
indx = !(colnames(data) %in% c(survivalTimerCox, survivalStatusrCox))
x = data.matrix(data[,indx, drop = FALSE])
y= Surv(data[,survivalTimerCox], dataM()[,survivalStatusrCox])
y= Surv(data[,survivalTimerCox], data[,survivalStatusrCox])
library("glmnet")
data <- read.table("www/data/brainCancer.txt", header=TRUE, sep = "\t")
survivalTimerCox = "time"
survivalStatusrCox = "status"
regCoxList = list()
indx = !(colnames(data) %in% c(survivalTimerCox, survivalStatusrCox))
x = data.matrix(data[,indx, drop = FALSE])
y= Surv(data[,survivalTimerCox], data[,survivalStatusrCox])
set.seed(1234)
cvFit = cv.glmnet(x, y, family = "cox", alpha = 1, type.measure = "deviance", nfolds = as.numeric(10))
highchart() %>% hc_exporting(enabled = TRUE, filename = "lambdaPlot") %>%
hc_add_series(name = "CI", type = "line", data = sort(cvFit$cvm), showInLegend = FALSE, zIndex = 1, marker = list(lineColor = "black", lineWidth = 1), lineWidth = 0, id = "survival") %>%
hc_add_series(name = "CI", data = as.matrix(cbind(sort(cvFit$cvlo), sort(cvFit$cvup))),type = "errorbar", names = "Limits", showInLegend = FALSE, zIndex = 0, lineWidth = 1.5, linkedTo = "survival") %>%
hc_chart(zoomType = "xy", inverted = FALSE) %>%
hc_xAxis(categories = sort(round(log(cvFit$lambda), 1)), title = list(text = "log(Lambda)")) %>%
hc_yAxis(startOnTick = FALSE, endOnTick = FALSE, title = list(text = "Partial Likelihood Deviance")) %>%
#hc_plotOptions(tooltip = list(headerFormat = "<b>Time: </b>{point.x}")) %>%
hc_tooltip(crosshairs = TRUE, shared = TRUE, headerFormat = "<b>Partial Likelihood Deviance: </b>{point.x} <br>") %>%
hc_plotOptions(line = list(tooltip = list(pointFormat = "<b>{series.name}: </b>{point.y:.3f} ")),
errorbar = list(tooltip = list(pointFormat = "({point.low} - {point.high})"))) %>%
hc_add_theme(hc_theme_google())
?cv.glmnet
library("glmnet")
data <- read.table("www/data/brainCancer.txt", header=TRUE, sep = "\t")
survivalTimerCox = "time"
survivalStatusrCox = "status"
regCoxList = list()
indx = !(colnames(data) %in% c(survivalTimerCox, survivalStatusrCox))
x = data.matrix(data[,indx, drop = FALSE])
y= Surv(data[,survivalTimerCox], data[,survivalStatusrCox])
set.seed(1234)
cvFit = cv.glmnet(x, y, family = "cox", alpha = 1, type.measure = "deviance", nfolds = as.numeric(10))
highchart() %>% hc_exporting(enabled = TRUE, filename = "lambdaPlot") %>%
hc_add_series(name = "CI", type = "line", data = sort(cvFit$cvm), showInLegend = FALSE, zIndex = 1, marker = list(lineColor = "black", lineWidth = 1), lineWidth = 0, id = "survival") %>%
hc_add_series(name = "CI", data = as.matrix(cbind(sort(cvFit$cvlo), sort(cvFit$cvup))),type = "errorbar", names = "Limits", showInLegend = FALSE, zIndex = 0, lineWidth = 1.5, linkedTo = "survival") %>%
hc_chart(zoomType = "xy", inverted = FALSE) %>%
hc_xAxis(categories = sort(round(log(cvFit$lambda), 1)), title = list(text = "log(Lambda)")) %>%
hc_yAxis(startOnTick = FALSE, endOnTick = FALSE, title = list(text = "Partial Likelihood Deviance")) %>%
#hc_plotOptions(tooltip = list(headerFormat = "<b>Time: </b>{point.x}")) %>%
hc_tooltip(crosshairs = TRUE, shared = TRUE, headerFormat = "<b>Partial Likelihood Deviance: </b>{point.x} <br>") %>%
hc_plotOptions(line = list(tooltip = list(pointFormat = "<b>{series.name}: </b>{point.y:.3f} ")),
errorbar = list(tooltip = list(pointFormat = "({point.low} - {point.high})"))) %>%
hc_add_theme(hc_theme_google())
?plot.predict
??plot.predict
?survival::plot.aareg
library("randomForestSRC")
library("pec")
data <- read.table("www/data/brainCancer.txt", header=TRUE, sep = "\t")
survivalTime = "time"
categoricalInput = "group"
continuousInput = "age"
statusVariable = "status"
status =  1
addInteractions = FALSE
twoWayinteractions = FALSE
threeWayinteractions = FALSE
customInteractions = FALSE
selectCustomInteractionTerms = FALSE
timeDependetCovariate = FALSE
timeDependentVariableTransformation = FALSE
selectTimeDependentCovariate = FALSE
strata = FALSE
strataVariable = FALSE
referenceCategory = "first"
multipleID = FALSE
if(!is.null(survivalTime)){
survivalTime = as.matrix(data[, survivalTime, drop = FALSE])
survivalTime = apply(survivalTime, 2, as.numeric)
}
if(!is.null(categoricalInput)){
categoricalInput = as.data.frame(data[, categoricalInput, drop = FALSE])
categoricalInput = apply(categoricalInput, 2, as.factor)
categoricalInput = as.data.frame(categoricalInput)
}
if(!is.null(continuousInput)){
continuousInput = as.data.frame(data[, continuousInput, drop = FALSE])
continuousInput = apply(continuousInput, 2, as.numeric)
continuousInput = as.data.frame(continuousInput)
}
if(!is.null(statusVariable)){
statusVariable = as.factor(data[, statusVariable])
}
if(!is.null(status)){
if(is.numeric(status)){status = as.factor(status)}else{status = as.factor(status)}
}
if(!is.null(categoricalInput) && !is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime[,1],
statusVar=statusVariable, categoricalInput, continuousInput)
newData = newData[complete.cases(newData),]
}else if(!is.null(categoricalInput) && is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime[,1],
statusVar=statusVariable, categoricalInput)
newData = newData[complete.cases(newData),]
}else if(is.null(categoricalInput) && !is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime = survivalTime[,1],
statusVar=statusVariable, continuousInput)
newData = newData[complete.cases(newData),]
}
if(referenceCategory != "first"){
for(l in 1:dim(categoricalInput)[2]){
newData[, names(categoricalInput)[l]] <- relevel(categoricalInput[,l], ref = levels(categoricalInput[,l])[length(levels(categoricalInput[,l]))])
}
}
if(addInteractions){
if(!is.null(categoricalInput) || !is.null(continuousInput)){
fNames <- names(c(categoricalInput, continuousInput))
}
if(twoWayinteractions && length(fNames) >1){
twoWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 2)), paste, collapse = ":"))
names(twoWayInteractionTerms) <- NULL
}else{twoWayInteractionTerms = NULL}
if(threeWayinteractions && length(fNames) >2){
threeWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 3)), paste, collapse = ":"))
names(threeWayInteractionTerms) <- NULL
}else{threeWayInteractionTerms = NULL}
if(customInteractions){
interactions = selectCustomInteractionTerms
}else{
interactions = c(twoWayInteractionTerms, threeWayInteractionTerms)
}
}else{
interactions = NULL
customInteractionTerms= NULL
}
if(strata){
strataVar = strataVariable
newData = cbind.data.frame(newData, data[, strataVar])
names(newData)[dim(newData)[2]] = strataVar
}
newData = cbind.data.frame(newData, data[colnames(data)[!(colnames(data) %in% colnames(newData))]])
newData$statusVar = as.factor(newData$statusVar)%in%status
if(timeDependetCovariate && !is.null(selectTimeDependentCovariate)){
timeDependentCovariateNames = list()
for(i in 1:length(selectTimeDependentCovariate)){
if(timeDependentVariableTransformation == "log"){
newData = cbind.data.frame(newData, tmpNames = newData[,selectTimeDependentCovariate[i]]*log(newData[, "survivalTime"]))
}else{
newData = cbind.data.frame(newData, tmpNames = as.numeric(newData[,selectTimeDependentCovariate[i]])*newData[, "survivalTime"])
}
names(newData)[dim(newData)[2]] = timeDependentCovariateNames[[i]] = paste0("time_", selectTimeDependentCovariate[i])
}
timeDependentNames = unlist(timeDependentCovariateNames)
}
if(!is.null(categoricalInput) || !is.null(continuousInput)){
predictors = paste0(names(c(categoricalInput, continuousInput)), collapse = "+")
if(!is.null(interactions)){
if(length(interactions) > 1){
interactions2 = paste(interactions, collapse = "+")
predictors2 = paste(predictors, interactions2, sep = "+", collapse = "+")
}
if(length(interactions) == 1){
predictors2 = paste(predictors, interactions, sep = "+")
}
predictors = predictors2
}
if(timeDependetCovariate && !is.null(selectTimeDependentCovariate)){
if(length(timeDependentNames) > 1){
timeDependents = paste(timeDependentNames, collapse = "+")
}else{
timeDependents =  timeDependentNames
}
predictors = paste(predictors, timeDependents, sep = "+", collapse = "+")
}
if(strata && !is.null(strataVariable)){
strataVars = paste0("strata(",strataVar,")")
predictors = paste(predictors, strataVars, sep = "+", collapse = "+")
}
}else{predictors = 1}
formula = as.formula(paste0("Surv(survivalTime, statusVar ==  TRUE) ~ ", predictors))
rf = rfsrc(formula = formula, data = newData, tree.err=TRUE,
importance = TRUE, membership = TRUE, statistics = TRUE, do.trace = TRUE,
split.null = FALSE, sampsize = NULL,
case.wt = NULL, xvar.wt = NULL, forest = TRUE, var.used = FALSE,
split.depth = FALSE, seed = 1234, coerce.factor = NULL)
?randomForestSRC::rfsrc()
?randomForestSRC::rfsrc
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/")
library(shiny)
library(shiny)
shinyUI(
fluidPage(
)
)
setwd("~/Desktop/consult/")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
runApp()
?h2
runApp()
runApp()
runApp()
?downloadButton
runApp()
?textInput
runApp()
runApp()
runApp()
oldConsultationForm = read.table("ConsultationForm.txt", header = T, sep = "\t")
oldConsultationForm
runApp()
oldConsultationForm = read.table("ConsultationForm.txt", header = T, sep = "\t")
colnames(oldConsultationForm)
colnames(oldConsultationForm) = c("Başvuru tarihi", "Randevu tarihi", "Çalışmanın adı", "Çalışmanın Türü", "Destekleyen Kurum",
"Araştırma Sorumlusu", "Analizi Talep Eden Fakülte", "Analizi Talep Eden Anabilim Dalı", "Araştırmanın Yürütücüsü",
"E-posta", "Tel Dahili", "Tel Cep", "Analiz Tarihi", "Analiz Sonucu", "Analiz Süresi", "Analiz Yapan")
colnames(oldConsultationForm)
runApp()
runApp()
runApp()
input$başvuruTarihi
runApp()
runApp()
runApp()
runApp()
runApp()
oldConsultationForm$`Başvuru tarihi`
newConsultationForm <- rbind.data.frame(oldConsultationForm, result)
result = read.table("ConsultationForm.txt", header = T, sep = "\t", stringsAsFactors = FALSE)
rbind.data.frame(oldConsultationForm, result)
colnames(result) = c("Başvuru tarihi", "Randevu tarihi", "Çalışmanın adı", "Çalışmanın Türü", "Destekleyen Kurum",
"Araştırma Sorumlusu", "Analizi Talep Eden Fakülte", "Analizi Talep Eden Anabilim Dalı", "Araştırmanın Yürütücüsü",
"E-posta", "Tel Dahili", "Tel Cep", "Analiz Tarihi", "Analiz Sonucu", "Analiz Süresi", "Analiz Yapan")
rbind.data.frame(oldConsultationForm, result)
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
newConsultationForm = read.table("ConsultationFormLast.txt", header = T, sep = "\t")
dim(newConsultationForm)
newConsultationForm2 = newConsultationForm[17,1:16]
newConsultationForm2
newConsultationForm2 = newConsultationForm[,c(17,1:16)]
newConsultationForm2
runApp()
?write.xlsx2
library(xlsx)
runApp()
runApp()
?dateInput
runApp()
?updateDateInput
runApp()
runApp()
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/BAEP_server_Devel/BET/")
shiny::runApp()
runApp('~/Desktop/consult')
runApp('~/Desktop/consult')
runApp()
