fromR$success <- FALSE
fromR[["successContents"]] <- success[1]
}
return(fromR)
}
# Panel: Descriptives
# Module: Univariate Outliers
library(Globals)
## reading from "txt", "csv" file
fileLoc = "~/Desktop/24.10.2016/turcosaData/data5.txt"
#fileLoc = "~/Google Drive/GSD/Şirket/TURCOSA Project/DataSets/mtcars.txt"
#fileLoc = "/Volumes/My Passport/TURCOSA Project/DataSets/testData.txt"
request <- jsonlite::toJSON(
list(requestID = 280985,
requestTime = Sys.time(),
sessionID = 3627,
serviceID = NULL,
port = 6379,
functionName = "importData",
functionVersion = "1.0",
split = NULL,
localTest = TRUE,
params = list(
file = fileLoc,
header = TRUE,
row.names = NULL,   ## rownames girilmiş ise aktif olacak ve girilen değer string olarak gönderilecek.
dec = ",",
sep=";",
na.strings = "NA",
stringsAsFactors = TRUE,
fileType = "TXT"
)
),
null = "null", na = "null", auto_unbox = TRUE)[1]
moduleResults <- ImportData:::importData(jsonlite:::fromJSON(request))
#change variable types
# session3627$data$cyl <- as.factor(session3627$data$cyl)
# session3627$data$am <- as.factor(session3627$data$am)
# session3627$data$vs <- as.factor(session3627$data$vs)
# session3627$data$gear <- as.factor(session3627$data$gear)
# session3627$data$carb <- as.factor(session3627$data$carb)
# split data
# assign("data", split(session3627$data, session3627$data$am), envir = session3627)
# Univariate Outlier Detection
request <- jsonlite::toJSON(
list(
requestID = 280985,
requestTime = Sys.time(),
sessionID = 3627,
serviceID = NULL,
port = 6379,
functionName = "univariateOutliers",
functionVersion = "1.0",
split = NULL,
localTest = TRUE,
params = list(
Variables = list(
variables = c("gear"),      ## Multiple seçim olacak.
groupVariables = "am"                      ## Tekli seçim olacak.
),
Statistics = list(
detectionMethod = "esd",        ## Tekli seçim özelliği olacak. c("zMethod", "grubbs", "quantile", "esd")
detectionMethodOptions = list(
zScoreForZMethod = 2,
alternativeForGeneralizedESD = "two.sided",   #  c("two.sided", "left.sided", "right.sided")
numberOfOutliersForGeneralizedESD = 2,
typeForQuantileMethod = "outlier"   # one of options c("outlier", "extreme")
),
shapiroWilkNormalityTest = TRUE,
confidenceLevel = 95
),  ## end of Statistics list
Options = list(
removeOutliers = TRUE
),
Graphs = list(
boxPlot = TRUE,
qqPlot = TRUE,
qqPlotOptions = list(
qqPlotCI = TRUE
)
),
Reports = list(
suppressTables = FALSE,
suppressGraphs = FALSE
#... = FALSE
)
) ## end of params list
), # end of Contingency Input list
null = "null", na = "null", auto_unbox = TRUE, pretty = TRUE)[1]
moduleResults <- univariateOutliers(jsonlite:::fromJSON(request))
moduleResults$result$testResults
library(MVN2)
?plot
setosa = iris[1:50, 1:2] # Iris data only for setosa and two variables
r = mvn(setosa)
class(r)
plot(r)
library(MVN2)
?plot
?plot.mardia
setosa = iris[1:50, 1:2] # Iris data only for setosa and two variables
r = mvn(setosa)
plot(3)
plot(r)
class(r)
class(r)
plot.mardia(r)
MVN2:::plot.mardia(r)
MVN2:::plot(r)
library(MVN2)
?plot
?plot.mardia
setosa = iris[1:50, 1:2] # Iris data only for setosa and two variables
plot(mvn(setosa))
library(compSurv)
?compSurv::plot.km
hmohiv <-read.table("http://bit.ly/2bVcHto", sep=",", header = TRUE)
km = km(survivalTime = "time", statusVariable = "censor", status = 1,
factors = "drug", quartilesOfSurvivalTimes = TRUE, data = hmohiv)
plot(x = km, type = "km", back.white = TRUE, cens.col = "red", interactive = TRUE)
km
km
hmohiv <-read.table("http://bit.ly/2bVcHto", sep=",", header = TRUE)
lt = lt(survivalTime = "time", statusVariable = "censor", status = 1,
factors = "drug", data = hmohiv)
plot(x = lt, type = "km", back.white = TRUE, interactive = TRUE)
hmohiv <-read.table("http://bit.ly/2bVcHto", sep=",", header = TRUE)
cox = cr(survivalTime = "time", categoricalInput = "drug",
continuousInput = "age", statusVariable = "censor", status = 1,
addInteractions = TRUE, customInteractions =TRUE,
selectCustomInteractionTerms = "age*drug", timeDependetCovariate = TRUE,
selectTimeDependentCovariate = "age", timeDependentVariableTransformation = "log",
data = hmohiv)
cox
plot(cox, back.white = TRUE, interactive = TRUE)
library(MVN2)
r = mvn(iris[-5])
class(r)
plot(r)
MVN2:::plot.mardia(r)
library(MVN2)
r = mvn(iris[-5])
MVN2:::plot.mardia(r)
library(MVN2)
plot(mvn(iris[-5]))
MVN2:::plot.mardia(mvn(iris[-5]))
MVN2:::plot.mardia(mvn(iris[1:2]))
?MVN2:::plot.mardia
plot.mardia(mvn(iris[1:2]))
plot(mvn(iris[1:2]))
class(mvn(iris[1:2]))
library(MVN2)
?plot
library(Globals)
library(LinearRegression)
library(Globals)
library(LinearRegression)
## Verinin yüklenmesi:
fileLoc = "~/Dropbox/GSD/Turcosa/testData/data5.txt"
request <- jsonlite::toJSON(list(requestID = 280985,
requestTime = Sys.time(),
sessionID = 3627,
serviceID = NULL,
port = 6379,
functionName = "importData",
functionVersion = "1.0",
split = NULL,
localTest = FALSE,
params = list(file = fileLoc,
dec = ",",
header = TRUE,
row.names = NULL,
sep=";",
fileType = "TXT")
), pretty = TRUE, auto_unbox = TRUE, null = "null", na = "null")[1]
results <- ImportData:::importData(jsonlite:::fromJSON(request))
# Change Variable types:
# request <- jsonlite::toJSON(list(requestID = 280985,
#                                  requestTime = Sys.time(),
#                                  sessionID = 3627,
#                                  serviceID = FALSE,
#                                  port = 6379,
#                                  functionName = "changeVariableProperties",
#                                  functionVersion = "1.0",
#                                  split = NULL,
#                                  localTest = FALSE,
#
#                                  params = list(
#                                    variables = c("mpg", "cyl", "disp", "hp", "drat", "wt", "qsec",
#                                                  "vs", "am", "gear", "carb"),
#                                    types = c("numeric", "factor", "numeric", "numeric", "numeric",
#                                              "numeric", "numeric", "factor", "factor", "orderedFactor", "numeric"),
#                                    variableNames = NULL
#                                  )
# ), null = "null")[1]
# results <- ImportData:::changeVariableProperties(jsonlite:::fromJSON(request))
#### Linear Regression
request <- jsonlite::toJSON(
list(
requestID = 280985,
requestTime = Sys.time(),
sessionID = 3627,
serviceID = NULL,
port = 6379,
functionName = "linearRegression",
functionVersion = "1.0",
split = NULL,
localTest = FALSE,
params = list(
Variables = list(
responseVar = "mpg",
categoricalInputs = c("vs","am"),
continuousInputs = "cyl"
),
Statistics = list(
displayDescriptives=TRUE,
confidenceLevel = 95,
displayCoefficients=TRUE,
correlationMatrix=TRUE,
covarianceMatrix=TRUE,
collinearity=TRUE,
durbinWatson=TRUE,
displayModelFit=FALSE
#alternativeHypothesis = "two.sided"
),  ## end of Statistics list
Options = list(
Store=list(predictions =TRUE,
residuals = TRUE,
standResiduals = TRUE,
stuResiduals=TRUE,
deletedResiduals = TRUE,
leverages =TRUE,
cooksDistance = TRUE,
dFITS = TRUE ),
modelSelection="enter",
enterIf=0.05,
removeIf=0.1
),
Graphs = list(
NULL
),
Reports = list(
NULL
)
) ## end of params list
), # end of Contingency Input list
null = "null", pretty = TRUE)[1]
moduleResults <- LinearRegression::linearRegression(jsonlite::fromJSON(request))
moduleResults$result$testResults$`Durbin-WatsonTest`
?LinearRegression
?LinearRegression::getDescriptiveResultsForLinearRegression
?LinearRegression::linearRegression
library(LinearRegression)
LinearRegression
?LinearRegression
library(Globals)
library(LinearRegression)
## Verinin yüklenmesi:
fileLoc = "~/Dropbox/GSD/Turcosa/testData/data5.txt"
request <- jsonlite::toJSON(list(requestID = 280985,
requestTime = Sys.time(),
sessionID = 3627,
serviceID = NULL,
port = 6379,
functionName = "importData",
functionVersion = "1.0",
split = NULL,
localTest = FALSE,
params = list(file = fileLoc,
dec = ",",
header = TRUE,
row.names = NULL,
sep=";",
fileType = "TXT")
), pretty = TRUE, auto_unbox = TRUE, null = "null", na = "null")[1]
results <- ImportData:::importData(jsonlite:::fromJSON(request))
# Change Variable types:
# request <- jsonlite::toJSON(list(requestID = 280985,
#                                  requestTime = Sys.time(),
#                                  sessionID = 3627,
#                                  serviceID = FALSE,
#                                  port = 6379,
#                                  functionName = "changeVariableProperties",
#                                  functionVersion = "1.0",
#                                  split = NULL,
#                                  localTest = FALSE,
#
#                                  params = list(
#                                    variables = c("mpg", "cyl", "disp", "hp", "drat", "wt", "qsec",
#                                                  "vs", "am", "gear", "carb"),
#                                    types = c("numeric", "factor", "numeric", "numeric", "numeric",
#                                              "numeric", "numeric", "factor", "factor", "orderedFactor", "numeric"),
#                                    variableNames = NULL
#                                  )
# ), null = "null")[1]
# results <- ImportData:::changeVariableProperties(jsonlite:::fromJSON(request))
#### Linear Regression
request <- jsonlite::toJSON(
list(
requestID = 280985,
requestTime = Sys.time(),
sessionID = 3627,
serviceID = NULL,
port = 6379,
functionName = "linearRegression",
functionVersion = "1.0",
split = NULL,
localTest = FALSE,
params = list(
Variables = list(
responseVar = "mpg",
categoricalInputs = c("vs","am"),
continuousInputs = "cyl"
),
Statistics = list(
displayDescriptives=TRUE,
confidenceLevel = 95,
displayCoefficients=TRUE,
correlationMatrix=TRUE,
covarianceMatrix=TRUE,
collinearity=TRUE,
durbinWatson=TRUE,
displayModelFit=FALSE
#alternativeHypothesis = "two.sided"
),  ## end of Statistics list
Options = list(
Store=list(predictions =TRUE,
residuals = TRUE,
standResiduals = TRUE,
stuResiduals=TRUE,
deletedResiduals = TRUE,
leverages =TRUE,
cooksDistance = TRUE,
dFITS = TRUE ),
modelSelection="enter",
enterIf=0.05,
removeIf=0.1
),
Graphs = list(
NULL
),
Reports = list(
NULL
)
) ## end of params list
), # end of Contingency Input list
null = "null", pretty = TRUE)[1]
moduleResults <- LinearRegression::linearRegression(jsonlite::fromJSON(request))
moduleResults$result$testResults$`Durbin-WatsonTest`
getCustomReports <- function(pdbIds, customReports, primaryOnly = TRUE){
ids = pdbIds
pdbids = paste(ids, collapse = ",")
reports = customReports
customReportColumns = paste(reports, collapse = ",")
if(primaryOnly){
pdbUrl = paste0("http://www.rcsb.org/pdb/rest/customReport.xml?pdbids=", pdbids, "&customReportColumns=", customReportColumns, "&primaryOnly=1&service=wsfile&format=csv")
}else{
pdbUrl = paste0("http://www.rcsb.org/pdb/rest/customReport.xml?pdbids=", pdbids, "&customReportColumns=", customReportColumns, "&service=wsfile&format=csv")
}
url <- url(pdbUrl)
result <- read.csv(pdbUrl)
return(result)
}
setwd("~/Dropbox/Nomogram/")
d <- read.csv("zor ent 531.csv", head=T)
d$ZE = as.factor(d$ZE)
d$BMI = as.numeric(d$BMI)
d$IIM = as.numeric(d$IIM)
d$TGL = as.numeric(d$TGL)
d$TMD = as.numeric(d$TMD)
d$MOV1 = as.factor(d$MOV1)
str(d)
library(rms)
ddist <- datadist(d); options(datadist='ddist')
str(d)
f <- lrm(ZE ~  IIM + TGL + MOV1, data=d, x=TRUE, y=TRUE)
nom <- nomogram(f, fun=function(x)1/(1+exp(-x)), fun.at=c(.001, .01, .05, seq(0.1, 0.9, by = .1), .95, .99, .999), funlabel="Zor Ent?basyon Riski")
f
plot(nom)
setwd("~/Dropbox/Nomogram/")
d <- read.csv("zor ent 531.csv", head=T)
d$ZE = as.factor(d$ZE)
d$BMI = as.numeric(d$BMI)
d$IIM = as.numeric(d$IIM)
d$TGL = as.numeric(d$TGL)
d$TMD = as.numeric(d$TMD)
d$MOV1 = as.factor(d$MOV1)
str(d)
library(rms)
ddist <- datadist(d); options(datadist='ddist')
str(d)
f <- lrm(ZE ~  IIM + TGL + MOV1, data=d, x=TRUE, y=TRUE)
nom <- nomogram(f, fun=function(x)1/(1+exp(-x)), fun.at=c(.001, .01, .05, seq(0.1, 0.9, by = .1), .95, .99, .999), funlabel="Zor Ent?basyon Riski")
f
plot(nom)
setwd("~/Dropbox/Nomogram/")
d <- read.csv("zor ent 531.csv", head=T)
d$ZE = as.factor(d$ZE)
d$BMI = as.numeric(d$BMI)
d$IIM = as.numeric(d$IIM)
d$TGL = as.numeric(d$TGL)
d$TMD = as.numeric(d$TMD)
d$MOV1 = as.factor(d$MOV1)
str(d)
library(rms)
ddist <- datadist(d); options(datadist='ddist')
str(d)
f <- lrm(ZE ~  IIM + TGL + MOV1, data=d, x=TRUE, y=TRUE)
nom <- nomogram(f, fun=function(x)1/(1+exp(-x)), fun.at=c(.001, .01, .05, seq(0.1, 0.9, by = .1), .95, .99, .999), funlabel="Zor Ent?basyon Riski")
f
plot(nom)
setwd("~/Dropbox/Nomogram/")
d <- read.csv("zor ent 531.csv", head=T)
head(d)
setwd("~/Dropbox/Nomogram/")
d <- read.csv("zor ent 531.csv", head=T)
head(d)
setwd("~/Dropbox/Nomogram/")
d <- read.csv("zor ent 531.csv", head=T)
head(d)
d$ZE = as.factor(d$ZE)
d$BMI = as.numeric(d$BMI)
d$IIM = as.numeric(d$IIM)
d$TGL = as.numeric(d$TGL)
d$TMD = as.numeric(d$TMD)
d$MOV1 = as.factor(d$MOV1)
str(d)
library(rms)
ddist <- datadist(d); options(datadist='ddist')
str(d)
f <- lrm(ZE ~  IIM + TGL + MOV1, data=d, x=TRUE, y=TRUE)
nom <- nomogram(f, fun=function(x)1/(1+exp(-x)), fun.at=c(.001, .01, .05, seq(0.1, 0.9, by = .1), .95, .99, .999), funlabel="Zor Ent?basyon Riski")
f
plot(nom)
setwd("~/Dropbox/Nomogram/")
d <- read.csv("zor ent 531.csv", head=T)
head(d)
d$ZE = as.factor(d$ZE)
d$BMI = as.numeric(d$BMI)
d$IIM = as.numeric(d$IIM)
d$TGL = as.numeric(d$TGL)
d$TMD = as.numeric(d$TMD)
d$MOV1 = as.factor(d$MOV1)
str(d)
library(rms)
ddist <- datadist(d); options(datadist='ddist')
str(d)
f <- lrm(ZE ~  IIM + TGL + MOV1, data=d, x=TRUE, y=TRUE)
nom <- nomogram(f, fun=function(x)1/(1+exp(-x)), fun.at=c(.001, .01, .05, seq(0.1, 0.9, by = .1), .95, .99, .999), funlabel="Zor Ent?basyon Riski")
f
plot(nom)
#
# val <- validate(f, method='boot', B=1000, bw=TRUE, rule="aic", type='residual', sls=0.05, aics=0, force=NULL, estimate=TRUE, pr=FALSE, emax.lim=c(0,1))
# val
#
# cal <- calibrate(f, method='boot', B=1000, bw=TRUE, rule="aic", type='residual', sls=0.05, aics=0, force=NULL, estimate=TRUE, pr=FALSE, smoother='lowess')
# plot(cal)
#
####################################################### IIM (start)
IIMDiff = nom$IIM$IIM-nom$IIM$IIM[1]
coeffIIM = nom$IIM$points/(IIMDiff)
coeffIIM[1] = 0
coeffIIMLength = seq(1:45)
repIIM = 5
coeffsIIM = c(rep(17.7777778 , 5), rep(7.7777778, 5), rep(4.4444444, 5), rep(2.7777778, 5), rep(1.7777778, 5), rep(1.1111111, 5), rep(0.6349206, 5), rep(0.2777778, 5), rep(0, 5))
IIMPoints = coeffIIMLength*coeffsIIM
IIMPoints2 = c(100, IIMPoints[c(5,10,15,20,25,30,35,40,45)])
repList = list(1:5, 6:10, 11:15, 16:20, 21:25, 26:30, 31:35, 36:40, 41:45)
IIMPoints3 = seq(1:45)
for(i in 1:9){
# if(i != 9){
diff = abs((IIMPoints2[i]-IIMPoints2[i+1])/repIIM)
mult = (diff*(1:repIIM))
mult[1] = 0
res = rep(IIMPoints2[i][1], repIIM) - mult
# }else{
#   res = ((IIMPoints2[i])/repIIM)*(1:repIIM)
#
# }
#
IIMPoints3[repList[[i]]] = res
}
IIMPoints4 = seq(1:45)
repList = list(1:5, 6:10, 11:15, 16:20, 21:25, 26:30, 31:35, 36:40, 41:45)
z = c(4,9,14,19,24,29,34,39,44)
for(i in 1:9){
# if(i != 9){
diff = abs((IIMPoints3[repList[[i]][1]]-IIMPoints3[z[i]])/repIIM)
mult = (diff*(1:repIIM))
mult[1] = 0
res = rep(IIMPoints3[repList[[i]][1]], repIIM) - mult
# }else{
#   res = ((IIMPoints2[i])/repIIM)*(1:repIIM)
#
# }
#
IIMPoints4[repList[[i]]] = res
}
IIMresult = data.frame(points = rev(seq(1:45)), points = IIMPoints4)
head(IIMresult)
install.packages("hdnom")
library(hdnom)
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/hdnomWeb/")
setwd("~/Dropbox/eppic/")
data = read.table("eppicFull.txt", header = T)
data = read.table("eppicFull.txt", header = T, sep = "\t")
dim(data)
head(data)
shiny::runApp('~/Dropbox/GSD/Studies/Web-Tools(Devel)/BAEP_server_Devel/BET')
runApp('~/Dropbox/GSD/Studies/Web-Tools(Devel)/BAEP_server_Devel/BET')
runApp('~/Dropbox/GSD/Studies/Web-Tools(Devel)/BAEP_server_Devel/BET')
runApp('~/Dropbox/GSD/Studies/Web-Tools(Devel)/BAEP_server_Devel/BET')
